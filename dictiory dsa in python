A dictionary in Python is a data structure that allows you to store data 
  in key-value pairs. It's like a real-world dictionary 
  where you look up a word (key) to find its definition (value).

  Key Features of a Dictionary:

    Key-Value Pairs:
        Each entry in a dictionary has a key and a corresponding value.
        Example: {'a': 3, 'b': 2} → Here, 'a' is the key, and 3 is its value.

    Unordered:
        Dictionaries are unordered collections (in Python 3.7+, they maintain 
                                                
                                                the insertion order, but this is not a defining property).

    Mutable:
        You can change, add, or remove key-value pairs in a dictionary.

    Fast Lookup:
        Keys are unique, and you can quickly find a value by its key.



          A dictionary in Python is a data structure that allows you to store data in key-value pairs. It's like a real-world dictionary where you look up a word (key) to find its definition (value).
Key Features of a Dictionary:

    Key-Value Pairs:
        Each entry in a dictionary has a key and a corresponding value.
        Example: {'a': 3, 'b': 2} → Here, 'a' is the key, and 3 is its value.

    Unordered:
        Dictionaries are unordered collections 
          (in Python 3.7+, they maintain the insertion order, but this is not a defining property).

    Mutable:
        You can change, add, or remove key-value pairs in a dictionary.

    Fast Lookup:
        Keys are unique, and you can quickly find a value by its key.

Creating a Dictionary

You can create a dictionary in several ways:
Example 1: Using Curly Braces {}



# Create a dictionary
my_dict = {'a': 1, 'b': 2, 'c': 3}
print(my_dict)  # Output: {'a': 1, 'b': 2, 'c': 3}



Example 2: Using the dict() Constructor


  # Create a dictionary
my_dict = dict(a=1, b=2, c=3)
print(my_dict)  # Output: {'a': 1, 'b': 2, 'c': 3}

Accessing Values in a Dictionary

You can access a value using its key:



  my_dict = {'a': 1, 'b': 2, 'c': 3}
print(my_dict['a'])  # Output: 1



  If you try to access a key that
  doesn’t exist, it will throw a KeyError:


print(my_dict['d'])  # Throws KeyError
To avoid this, use the .get() method:

print(my_dict.get('d', 'Key not found'))  # Output: Key not found


  Adding, Updating, and Deleting Entries
Adding or Updating:



my_dict = {'a': 1, 'b': 2}
my_dict['c'] = 3  # Add new key-value pair
my_dict['a'] = 10  # Update value for existing key
print(my_dict)  # Output: {'a': 10, 'b': 2, 'c': 3}




Deleting:



del my_dict['b']  # Delete key 'b'
print(my_dict)  # Output: {'a': 10, 'c': 3}


Iterating Over a Dictionary
Iterate Through Keys:


for key in my_dict:
    print(key)  # Outputs: a, b, c


  for value in my_dict.values():
    print(value)  # Outputs: 1, 2, 3
























  
